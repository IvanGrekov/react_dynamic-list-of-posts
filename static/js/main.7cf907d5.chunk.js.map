{"version":3,"sources":["components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/api.js","api/posts.js","api/coments.js","App.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","index.js"],"names":["Loader","className","PostsList","posts","selectedPostId","selectPost","length","map","post","key","id","userId","title","type","classNames","button_active","onClick","BASE_URL","request","url","fetch","then","response","json","result","data","getPosts","deleteComment","commentId","method","addComment","body","headers","JSON","stringify","initialPosts","NewCommentForm","onAdd","useState","newCommentName","setNewCommentName","newCommentEmail","setNewCommentEmail","newCommentBody","setNewCommentBody","changeInputValue","value","callback","onSubmit","event","preventDefault","name","placeholder","required","onChange","target","PostDetails","selectedPost","setSelectedPost","comments","setComments","commentsHiding","setCommentsHiding","useEffect","postId","filter","comment","getPostComments","currentStatus","currentList","email","App","setPosts","setSelectedPostId","sortPostsByUser","getUserPosts","users","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7cf907d5.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './PostsList.scss';\nimport { Loader } from '../Loader';\n\nexport const PostsList = ({\n  posts,\n  selectedPostId,\n  selectPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length !== 0 ? (\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                'PostsList__button',\n                'button',\n                { button_active: selectedPostId === post.id },\n              )}\n              onClick={() => {\n                selectPost(post.id);\n              }}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    ) : (\n      <Loader />\n    )}\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function remove(url, id) {\n  return fetch(`${BASE_URL}${url}/${id}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function post(url, body) {\n  return fetch(`${BASE_URL}${url}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(body),\n  });\n}\n","import { request } from './api';\n\nconst endPoint = '/posts';\n\nexport function getPosts() {\n  return request(endPoint);\n}\n\nexport function getUserPosts(userId) {\n  return getPosts()\n    .then((result) => {\n      const sortedPosts = result.filter(post => (\n        post.userId === userId\n      ));\n\n      return sortedPosts;\n    });\n}\n\nexport function getPostDetails(postId) {\n  return request(`${endPoint}/${postId}`);\n}\n","import { request, remove, post } from './api';\n\nconst endPoint = '/comments';\n\nexport function getPostComments(postId) {\n  return request(endPoint)\n    .then((result) => {\n      const postComments = result.filter(comment => (\n        comment.postId === postId\n      ));\n\n      return postComments;\n    });\n}\n\nexport function deleteComment(commentId) {\n  return remove(endPoint, commentId);\n}\n\nexport function addComment(body) {\n  return post(endPoint, body)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\nimport users from './api/users.json';\n\nlet initialPosts;\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getPosts()\n      .then((result) => {\n        initialPosts = result;\n        setPosts(initialPosts);\n      });\n  }, []);\n\n  const sortPostsByUser = (userId) => {\n    if (userId === 0) {\n      return setPosts(initialPosts);\n    }\n\n    return getUserPosts(userId)\n      .then(result => setPosts(result));\n  };\n\n  const selectPost = (postId) => {\n    if (postId === selectedPostId) {\n      return setSelectedPostId(0);\n    }\n\n    return setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              sortPostsByUser(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            selectPost={selectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails selectedPostId={selectedPostId} />\n            )\n            : 'There is not the selected post'\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ onAdd }) => {\n  const [newCommentName, setNewCommentName] = useState('');\n  const [newCommentEmail, setNewCommentEmail] = useState('');\n  const [newCommentBody, setNewCommentBody] = useState('');\n\n  const changeInputValue = (value, callback) => {\n    callback(value);\n  };\n\n  const addNewComment = () => {\n    onAdd(newCommentName, newCommentEmail, newCommentBody);\n\n    setNewCommentName('');\n    setNewCommentEmail('');\n    setNewCommentBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addNewComment();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={newCommentName}\n          onChange={(event) => {\n            changeInputValue(event.target.value, setNewCommentName);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={newCommentEmail}\n          onChange={(event) => {\n            changeInputValue(event.target.value, setNewCommentEmail);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={newCommentBody}\n          onChange={(event) => {\n            changeInputValue(event.target.value, setNewCommentBody);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostDetails } from '../../api/posts';\nimport {\n  getPostComments,\n  deleteComment,\n  addComment,\n} from '../../api/coments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [commentsHiding, setCommentsHiding] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(result => setSelectedPost(result));\n\n    setComments(null);\n\n    getPostComments(selectedPostId)\n      .then(result => setComments(result));\n  }, [selectedPostId]);\n\n  const removeComment = (id) => {\n    deleteComment(id)\n      .then(() => {\n        setComments(currentList => (\n          currentList.filter(comment => comment.id !== id)\n        ));\n      });\n  };\n\n  const addNewComment = (name, email, body) => {\n    const commentBody = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    addComment(commentBody)\n      .then((result) => {\n        setComments(currentList => [...currentList, result]);\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {selectedPost ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{selectedPost.title}</p>\n          </section>\n\n          {comments ? (\n            <>\n              <section className=\"PostDetails__comments\">\n                {comments.length === 0\n                  ? 'There are not comments yet'\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => {\n                        setCommentsHiding(currentStatus => !currentStatus);\n                      }}\n                    >\n                      {commentsHiding\n                        ? `Show ${comments.length} comments`\n                        : `Hide ${comments.length} comments`\n                      }\n                    </button>\n                  )}\n\n                {!commentsHiding && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li className=\"PostDetails__list-item\" key={comment.id}>\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => {\n                            removeComment(comment.id);\n                          }}\n                        >\n                          X\n                        </button>\n                        <p>{comment.name}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm onAdd={addNewComment} />\n                </div>\n              </section>\n            </>\n          ) : (\n            <Loader />\n          )}\n        </>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}